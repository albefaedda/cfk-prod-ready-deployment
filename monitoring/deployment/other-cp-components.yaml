---
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: connect
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-server-connect:7.3.1
    init: confluentinc/confluent-init-container:2.5.1
  metrics:
    prometheus:
      blacklist:
        - kafka.admin.client:*
        - kafka.consumer:type=*,id=*
        - kafka.producer:type=*,id=*
        - kafka.producer:client-id=confluent.monitoring*,*
        - kafka.*:type=kafka-metrics-count,*
      rules:
        - labels:
            $2: $3
            client-id: $1
          name: kafka_connect_app_info
          pattern: 'kafka.connect<type=app-info, client-id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - name: kafka_connect_connect_worker_rebalance_metrics_$1
          pattern: kafka.connect<type=connect-worker-rebalance-metrics><>([^:]+)
          valueFactor: 1
        - labels:
            client_id: $2
          name: kafka_connect_$1_$3
          pattern: kafka.connect<type=(.+), client-id=(.+)><>([^:]+)
          valueFactor: 1
        - labels:
            connector: aggregate
          name: kafka_connect_connect_worker_metrics_$1
          pattern: kafka.connect<type=connect-worker-metrics><>([^:]+)
          valueFactor: 1
        - labels:
            connector: $1
          name: kafka_connect_connect_worker_metrics_$2
          pattern: kafka.connect<type=connect-worker-metrics, connector=(.+)><>([^:]+)
          valueFactor: 1
        - labels:
            $2: $3
            connector: $1
          name: kafka_connect_connector_metrics
          pattern: 'kafka.connect<type=connector-metrics, connector=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            connector: $2
            task: $3
          name: kafka_connect_$1_task_metrics_$4
          pattern: 'kafka.connect<type=(.+)-task-metrics, connector=(.+), task=(\d+)><>(.+):
              (.+)'
          valueFactor: 1
        - labels:
            connector: $1
            task: $2
          name: kafka_connect_task_error_metrics_$3
          pattern: kafka.connect<type=task-error-metrics, connector=(.+), task=(\d+)><>([^:]+)
          valueFactor: 1
        - labels:
            $1: $2
            $3: $4
            $5: $6
            $7: $8
          name: confluent_replicator_task_metrics_$9
          pattern: 'confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+),
              confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>confluent-replicator-task-topic-partition-(.*):
              (.*)'
          valueFactor: 1
        - labels:
            $1: $2
            $3: $4
            $5: $6
            $7: $8
            $9: $10
          name: confluent_replicator_task_metrics_info
          pattern: 'confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+),
              confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>(confluent-replicator-destination-cluster|confluent-replicator-source-cluster|confluent-replicator-destination-topic-name):
              (.*)'
          value: "1"
          valueFactor: 1
        - labels:
            $3: $4
            client_id: $2
            client_type: $1
          name: kafka_$1_app_info
          pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            $7: $8
            client_type: $1
          name: kafka_$1_$2_$9
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            client_type: $1
          name: kafka_$1_$2_$7
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_type: $1
          name: kafka_$1_$2_$5
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            client_type: $1
          name: kafka_$1_$2_$3
          pattern: 'kafka.(.+)<type=(.+)><>(.+):'
          valueFactor: 1
      whitelist:
        - kafka.connect:type=app-info,client-id=*
        - kafka.connect:type=connect-worker-rebalance-metrics
        - kafka.connect:type=connect-coordinator-metrics,*
        - kafka.connect:type=connect-metrics,*
        - kafka.connect:type=connect-worker-metrics
        - kafka.connect:type=connect-worker-metrics,*
        - kafka.connect:type=connector-metrics,*
        - kafka.connect:type=*-task-metrics,*
        - kafka.connect:type=task-error-metrics,*
        - confluent.replicator:type=confluent-replicator-task-metrics,*
        - kafka.consumer:*
        - kafka.producer:*
  tls:
    secretRef: connect-tls-cert
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: myorg.com
      prefix: connect
  dependencies:
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer               
        bearer:
          secretRef: connect-mds-client
      tls:
        enabled: true
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: connect-ldap-user
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: KsqlDB
metadata:
  name: ksqldb
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-ksqldb-server:7.3.1
    init: confluentinc/confluent-init-container:2.5.1
  metrics:
    prometheus:
      blacklist:
        - kafka.streams:type=kafka-metrics-count
        - kafka.admin.client:*
        - kafka.consumer:type=*,id=*
        - kafka.consumer:type=*,client-id=*
        - kafka.consumer:type=*,client-id=*,node-id=*
        - kafka.producer:type=*,id=*
        - kafka.producer:type=*,client-id=*
        - kafka.producer:type=*,client-id=*,node-id=*
        - kafka.streams:type=stream-processor-node-metrics,thread-id=*,task-id=*,processor-node-id=*
        - kafka.*:type=kafka-metrics-count,*
      rules:
        - labels:
            id: $3
            key: $2
          name: ksql_$1_$4
          pattern: io.confluent.ksql.metrics<type=(.+), key=(.+), id=(.+)><>([^:]+)
          valueFactor: 1
        - labels:
            ksql_cluster: $1
          name: ksql_ksql_engine_query_stats_$2
          pattern: io.confluent.ksql.metrics<type=_confluent-ksql-(.+)ksql-engine-query-stats><>([^:]+)
          valueFactor: 1
        - labels:
            $4: $5
            ksql_cluster: $2
            ksql_query: $3
          name: ksql_ksql_metrics_$1_$4
          pattern: 'io.confluent.ksql.metrics<type=(.+), status=_confluent-ksql-(.+)query_(.+)><>(.+):
              (.+)'
          value: "1"
          valueFactor: 1
        - labels:
            $4: $5
            task_id: $3
            thread_id: $2
          name: kafka_streams_$1_$6
          pattern: 'kafka.streams<type=(.+), thread-id=(.+), task-id=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            task_id: $3
            thread_id: $2
          name: kafka_streams_$1_$4
          pattern: 'kafka.streams<type=(.+), thread-id=(.+), task-id=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $1: $2
            $3: $4
          name: kafka_streams_stream_metrics
          pattern: 'kafka.streams<type=stream-metrics, (.+)=(.+)><>(state|alive-stream-threads|commit-id|version|application-id):
              (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $2: $3
          name: kafka_streams_$1_$4
          pattern: kafka.streams<type=(.+), (.+)=(.+)><>([^:]+)
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_id: $2
            client_type: $1
          name: kafka_$1_app_info
          pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            $7: $8
            client_type: $1
          name: kafka_$1_$2_$9
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            client_type: $1
          name: kafka_$1_$2_$7
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_type: $1
          name: kafka_$1_$2_$5
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            client_type: $1e
          name: kafka_$1_$2_$3
          pattern: 'kafka.(.+)<type=(.+)><>(.+):'
          valueFactor: 1
      whitelist:
        - io.confluent.ksql.metrics:*
        - kafka.consumer:*
        - kafka.producer:*
        - kafka.streams:*
  tls:
    secretRef: ksqldb-tls-cert
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: myorg.com
      prefix: ksql  
  dataVolumeCapacity: 1Gi
  storageClass:
    name: production-storage-class
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: ksqldb-ldap-user
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer               
        bearer:
          secretRef: ksqldb-mds-client
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-enterprise-control-center:7.3.1
    init: confluentinc/confluent-init-container:2.5.1
  metrics:
    prometheus:
      blacklist:
        - kafka.streams:type=kafka-metrics-count
        - kafka.admin.client:*
        - kafka.consumer:type=*,id=*
        - kafka.producer:type=*,id=*
        - kafka.*:type=kafka-metrics-count,*
      rules:
        - labels:
            $4: $5
            task_id: $3
            thread_id: $2
          name: kafka_streams_$1_$6
          pattern: 'kafka.streams<type=(.+), thread-id=(.+), task-id=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            task_id: $3
            thread_id: $2
          name: kafka_streams_$1_$4
          pattern: 'kafka.streams<type=(.+), thread-id=(.+), task-id=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $1: $2
            $3: $4
          name: kafka_streams_stream_metrics
          pattern: 'kafka.streams<type=stream-metrics, (.+)=(.+)><>(state|alive-stream-threads|commit-id|version|application-id):
              (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $2: $3
          name: kafka_streams_$1_$4
          pattern: kafka.streams<type=(.+), (.+)=(.+)><>([^:]+)
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_id: $2
            client_type: $1
          name: kafka_$1_app_info
          pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            $7: $8
            client_type: $1
          name: kafka_$1_$2_$9
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            client_type: $1
          name: kafka_$1_$2_$7
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_type: $1
          name: kafka_$1_$2_$5
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            client_type: $1
          name: kafka_$1_$2_$3
          pattern: 'kafka.(.+)<type=(.+)><>(.+):'
          valueFactor: 1
      whitelist:
        - kafka.streams:*
        - kafka.consumer:*
        - kafka.producer:*
  tls:
    secretRef: c3-tls-cert
  #configOverrides:
  #  log4j: 
  #    - log4j.rootLogger=DEBUG, stdout  
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: myorg.com
      prefix: controlcenter
  dataVolumeCapacity: 1Gi
  storageClass:
    name: production-storage-class
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: c3-ldap-user
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer
        bearer:
          secretRef: c3-mds-client
      tls:
        enabled: true 
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true  
    ksqldb:
    - name: ksqldb
      url: https://ksqldb.confluent.svc.cluster.local:8088
      tls:
        enabled: true  
    connect:
    - name: connect
      url: https://connect.confluent.svc.cluster.local:8083
      tls:
        enabled: true  
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:7.3.1
    init: confluentinc/confluent-init-container:2.5.1
  metrics:
    prometheus:
      blacklist:
        - kafka.producer:type=app-info,client-id=*
        - kafka.consumer:type=app-info,client-id=*
        - kafka.admin.client:*
        - kafka.consumer:type=*,id=*
        - kafka.producer:type=*,id=*
        - kafka.*:type=kafka-metrics-count,*
      rules:
        - name: kafka_schema_registry_jetty_metrics_$1
          pattern: 'kafka.schema.registry<type=jetty-metrics>([^:]+):'
          valueFactor: 1
        - name: kafka_schema_registry_jersey_metrics_$1
          pattern: 'kafka.schema.registry<type=jersey-metrics>([^:]+):'
          valueFactor: 1
        - labels:
            $2: $3
            client-id: $1
          name: kafka_schema_registry_app_info
          pattern: 'kafka.schema.registry<type=app-info, id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - name: kafka_schema_registry_registered_count
          pattern: 'kafka.schema.registry<type=registered-count>([^:]+):'
          valueFactor: 1
        - labels:
            schema_type: $1
          name: kafka_schema_registry_schemas_$2
          pattern: 'kafka.schema.registry<type=(\w+)-schemas-(\w+)>([^:]+):'
          valueFactor: 1
        - labels:
            client_id: $2
          name: kafka_schema_registry_$1_$3
          pattern: 'kafka.schema.registry<type=(.+), client-id=(.+)><>([^:]+):'
          valueFactor: 1
        - labels:
            $3: $4
            client_id: $2
            client_type: $1
          name: kafka_$1_app_info
          pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)'
          type: UNTYPED
          value: "1"
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            $7: $8
            client_type: $1
          name: kafka_$1_$2_$9
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            $5: $6
            client_type: $1
          name: kafka_$1_$2_$7
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            $3: $4
            client_type: $1
          name: kafka_$1_$2_$5
          pattern: 'kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):'
          type: GAUGE
          valueFactor: 1
        - labels:
            client_type: $1
          name: kafka_$1_$2_$3
          pattern: 'kafka.(.+)<type=(.+)><>(.+):'
          valueFactor: 1
      whitelist:
        - kafka.schema.registry:type=jetty-metrics
        - kafka.schema.registry:type=jersey-metrics
        - kafka.schema.registry:type=app-info,id=*
        - kafka.schema.registry:type=registered-count
        - kafka.schema.registry:type=json-schema*
        - kafka.schema.registry:type=protobuf-schemas*
        - kafka.schema.registry:type=avro-schemas*
        - kafka.schema.registry:type=kafka.schema.registry-metrics,client-id=*
        - kafka.schema.registry:type=kafka.schema.registry-coordinator-metrics,client-id=*
        - kafka.consumer:*
        - kafka.producer:*
  tls:
    secretRef: sr-tls-cert
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: myorg.com
      prefix: schemaregistry 
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: sr-ldap-user
      tls:
        enabled: true 
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer
        bearer:
          secretRef: sr-mds-client
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestProxy
metadata:
  name: kafkarestproxy
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-kafka-rest:7.3.1
    init: confluentinc/confluent-init-container:2.5.1
  tls:
    secretRef: krp-tls-cert
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: myorg.com
      prefix: kafkarestproxy
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: krp-ldap-user
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer               
        bearer:
          secretRef: krp-mds-client
      tls:
        enabled: true
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true  
