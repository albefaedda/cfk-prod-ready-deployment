------------------
Kafka Cert: 
------------------

Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/kafka-domain.json | cfssljson -bare ssl-encryption/certs/generated/kafka/kafka

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/kafka/kafka.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic kafka-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/kafka/kafka.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/kafka/kafka-key.pem \
  --namespace confluent

------------------
Schema Registry:
------------------

Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/schema-registry-domain.json | cfssljson -bare ssl-encryption/certs/generated/schema-registry/sr

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/schema-registry/sr.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic sr-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/schema-registry/sr.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/schema-registry/sr-key.pem \
  --namespace confluent

------------------
Connect:
------------------
 
Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/connect-domain.json | cfssljson -bare ssl-encryption/certs/generated/connect/connect

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/connect/connect.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic connect-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/connect/connect.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/connect/connect-key.pem \
  --namespace confluent


------------------
Control Center:
------------------

Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/control-center-domain.json | cfssljson -bare ssl-encryption/certs/generated/control-center/c3

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/control-center/c3.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic c3-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/control-center/c3.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/control-center/c3-key.pem \
  --namespace confluent


------------------
KsqlDB:
------------------

Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/ksqldb-domain.json | cfssljson -bare ssl-encryption/certs/generated/ksqldb/ksqldb

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/ksqldb/ksqldb.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic ksqldb-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/ksqldb/ksqldb.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/ksqldb/ksqldb-key.pem \
  --namespace confluent


------------------
REST Proxy:
------------------

Create Certs:

cfssl gencert -ca=ssl-encryption/certs/generated/ca/ca.pem \
-ca-key=ssl-encryption/certs/generated/ca/ca-key.pem \
-config=ssl-encryption/certs/config/ca-config.json \
-profile=server ssl-encryption/certs/config/rest-proxy-domain.json | cfssljson -bare ssl-encryption/certs/generated/rest-proxy/krp

Validate cert:

openssl x509 -in ssl-encryption/certs/generated/rest-proxy/krp.pem -text -noout

Create the Kubernetes secret for the certicicate: 

kubectl create secret generic krp-tls-cert \
  --from-file=fullchain.pem=ssl-encryption/certs/generated/rest-proxy/krp.pem \
  --from-file=cacerts.pem=ssl-encryption/certs/generated/ca/ca.pem \
  --from-file=privkey.pem=ssl-encryption/certs/generated/rest-proxy/krp-key.pem \
  --namespace confluent